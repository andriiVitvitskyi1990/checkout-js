{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/payment/getPreselectedPayment.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","TextArea","testId","isEqualAddress","address1","address2","normalizeAddress","address","customFields","filter","AccordionContext","onToggle","disabled","labelContent","onChange","name","renderField","field","checked","value","render","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","state","getContextValue","selectedItemId","handleToggleItem","props","isDisabled","onSelect","setState","this","children","defaultSelectedItemId","Provider","ChecklistContext","undefined","connectFormik","setFieldValue","handleSelect","contextValue","mapCustomFormFieldsFromFormValues","customFieldsObject","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","document","addEventListener","removeEventListener","componentWillUnmount","placement","dropdown","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","parseAnchor","text","div","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","Input","Label","date","fieldType","options","placeholder","inputFormat","handleDateChange","dateValue","target","DynamicFormFieldType","map","optionValue","radio","length","checkbox","Array","isArray","includes","autoComplete","calendarClassName","dateFormat","maxDate","max","Date","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderProps","secret","fieldLabel","required","maxLength","parentFieldName","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","number","renderInput","items","helperLabel","rows","FormField","input","mapAddressFromFormValues","formValues","shouldSaveAddress","isValidCustomerAddress","addresses","formFields","customerAddress","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","handleUseNewAddress","onUseNewAddress","role","AddressSelectMenu","AddressSelectButton","AddressSelect","renderLabel","hidden","legend","getPreselectedPayment","checkout","payments","find","payment","providerId","data","language","translatedString","translate","parsedString","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","ADDRESS_FIELD_IDS","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","types","create","autocompleteData","addressSelector","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","content","stateReducer","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","inputProps","initialValue","initialHighlightedIndex","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","countryCode","supportedCountries","country","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","dateFormFieldNames","custom","componentDidMount","current","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","addressFieldName","translatedPlaceholderId","DynamicFormField","CheckboxFormField","withLanguage","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","done","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","htmlId","Checklist","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","preselectedPayment","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","concat","lineItemIndex","splitItems","quantity","variantId","productId","splitItem","imageUrl","alt","src","optionName","nameId","shippingAddress","ShippingOptionListItem","consignmentId","shippingOption","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","inputName","isLoading","shippingOptions","selectedShippingOptionId","onSelectedOption","LoadingOverlay","selectDefaultShippingOptions","selectShippingOption","getConsignments","selectedShippingOption","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","subscribeToConsignments","unsubscribe","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","sort","a","b","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","handleSubmit","mapPropsToValues","shippingOptionIds","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Legend","Alert","ShippingOptions","OrderComments","Button","variant","Primary","itemKey","assignItem","onUnhandledError","getFields","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","newId","matchingCartItemIds","findNewItemId","updatedItems","updateShippableItems","findIndex","getDerivedStateFromProps","isGuest","onSignIn","onCreateAccount","TranslatedLink","Form","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","formFieldName","handleAutocompleteToggle","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","unmountContentWhenLoading","AddressForm","buttonId","customFormFields","shouldShowCustomFormFields","padding","size","Tiny","Secondary","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","initializeShipping","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","customerMessage","onMultiShippingSubmit","onSingleShippingSubmit","signOut","onMultiShippingChange","shouldShowMultiShipping","handleSingleShippingSubmit","addressValues","updateCheckout","updateShippingAddress","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","isInitializing","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","onToggleMultiShipping","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"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","file":"shipping-70eeb9bf.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = ['id', 'shouldSaveAddress', 'stateOrProvinceCode', 'type', 'email'];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport './AddressSelect.scss';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a href=\"#\" onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }>\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(payment =>\n        !isGiftCertificatePayment(payment)\n        && !isStoreCreditPayment(payment)\n        && !!payment.providerId\n    );\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getAddressFormFieldInputId } from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getAddressFormFieldInputId(name),\n    }), [name]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                labelContent={ labelContent }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport { getAddressFormFieldInputId, getAddressFormFieldLegacyName } from './getAddressFormFieldInputId';\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n        } = this.props;\n\n        return (<>\n            <Fieldset>\n                <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                    { formFields.map(field => {\n                        const addressFieldName = field.name;\n                        const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                        if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                            return (\n                                <GoogleAutocompleteFormField\n                                    apiKey={ googleMapsApiKey }\n                                    countryCode={ countryCode }\n                                    field={ field }\n                                    key={ field.id }\n                                    nextElement={ this.nextElement || undefined }\n                                    onChange={ this.handleAutocompleteChange }\n                                    onSelect={ this.handleAutocompleteSelect }\n                                    onToggleOpen={ onAutocompleteToggle }\n                                    parentFieldName={ fieldName }\n                                    supportedCountries={ countriesWithAutocomplete }\n                                />\n                            );\n                        }\n\n                        return (\n                            <DynamicFormField\n                                autocomplete={ AUTOCOMPLETE[field.name] }\n                                extraClass={ `dynamic-form-field--${getAddressFormFieldLegacyName(addressFieldName)}` }\n                                field={ field }\n                                inputId={ getAddressFormFieldInputId(addressFieldName) }\n                                // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                key={ `${field.id}-${field.name}` }\n                                label={ field.custom ? field.label : <TranslatedString id={ LABEL[field.name] } /> }\n                                onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                                parentFieldName={ field.custom ?\n                                    (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                    fieldName }\n                                placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            />\n                        );\n                    }) }\n                </div>\n            </Fieldset>\n            { shouldShowSaveAddress &&\n                <CheckboxFormField\n                    labelContent={ <TranslatedString id=\"address.save_in_addressbook\" /> }\n                    name={ fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress' }\n                /> }\n        </>);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string);\n    }, [\n        id,\n        onUseNewAddress,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .slice(0, isMultiShippingMode ? undefined : 1)\n                .sort((a, b) => (a.id > b.id ? -1 : 1))\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nfunction mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onUseNewAddress,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n        } = this.props;\n\n        const { items } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={ onCreateAccount }\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Form>\n                <ul className=\"consignmentList\">\n                    { items.map(item => (\n                        <li key={ item.key }>\n                            <ItemAddressSelect\n                                addresses={ addresses }\n                                item={ item }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ onUseNewAddress }\n                            />\n                        </li>\n                    )) }\n                </ul>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading }\n                    isMultiShippingMode={ true }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                />\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n    const updatedItems: ShippableItem[] = [];\n\n    items.forEach((item, i) => {\n        const id = newId && (i === updatedItemIndex || !cartItemIds.includes(item.id)) ?\n            newId : item.id;\n\n        updatedItems[i] = {\n            ...item,\n            id,\n            consignment: findConsignment(consignments || [], id  as string),\n        };\n    });\n\n    return updatedItems;\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <DynamicFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <DynamicFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                    />\n                    {\n                        shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    }\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress,  customerMessage }) => ({\n        billingSameAsShipping: true,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getCustomFormFieldsValidationSchema({\n                    translate: getTranslateAddressError(language),\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                customerMessage={ customerMessage }\n                getFields={ getFields }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(billingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ onToggleMultiShipping }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest }\n                        updateAddress={ updateShippingAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}